.data
N: .word 6				# Число столбцов
M: .word 6				# Число строк
matrix: .word 1, 1, 1, 1, 1, 1
		.word 2, 2, 2, 2, 2, 2
		.word 3, 3, 3, 3, 3, 3
		.word 4, 4, 4, 4, 4, 4
		.word 5, 5, 5, 5, 5, 5
		.word 6, 6, 6, 6, 6, 6
result: .word 0				# Массив для сумм строк
	.word 0
	.word 0
	.word 0
	.word 0
	.word 0				
maxrow: .word 0				# Индекс строки с максимальной суммой
	.text
	.globl main
main:
# Подготовка параметров для вызова process
	la a2, N			# адрес N (число столбцов)
	la a3, M			# адрес M (число строк)
	la a4, matrix			# адрес начала матрицы
	la a5, result			# адрес массива сумм
	la a6, maxrow			# адрес переменной maxrow
	call process
# Подготовка параметров для вывода результатов
	la a2, maxrow			# адрес переменной maxrow
	la a3, result			# адрес массива result
	call print			# Вызов функции print для вывода сумм строк
	call exit			# Вызов функции exit для завершения программы
# Функция print: выводит элементы массива result.
print:
	lw t1, 0(a2)			# номер строки с максимальной суммой
	slli t2, t1, 2			# t2 = maxrow * 4 (смещение в массиве result)
	add t2, t2, a3			# t2 = &result[maxrow]
	lw t3, 0(t2)			# t3 = result[maxrow] (максимальная сумма строки)
	addi a0, x0, 1			# Код системного вызова для печати целого числа (print_int)
	mv a1, t1			# Передаём maxrow в a1
	ecall				# Выводим maxrow
	addi a0, x0, 11			# Код системного вызова для печати символа (print_char)
	addi a1, x0, 32			# ASCII-код символа пробела (32 - пробел)
	ecall				# Выводим пробел
	addi a0, x0, 1			# Код системного вызова печати целого числа (print_int)
	mv a1, t3			# Передаём result[maxrow] в a1
	ecall				# Выводим result[maxrow]
	ret				# Возвращаемся из функции print
# Функция exit: завершает выполнение программы.
exit:
	addi a0, x0, 10			# Готовим системный вызов для выхода (exit)
	ecall				# Вызов системного вызова, завершающего программу
# Функция process: вычисляет сумму элементов каждой строки матрицы и сохраняет её в массив result.
process:
	lw t1, 0(a2)			# t1 = N (число столбцов)
	lw t2, 0(a3)			# t2 = M (число строк)
	addi t4, x0, 0			# Инициализация счетчика строк (row pointer)
	addi t0, x0, 0			# current_max = 0 (максимальная сумма)
	addi s1, x0, 0			# max_row_index = 0 (индекс максимальной строки)
init:
	addi t5, x0, 0			# Обнуляем сумму текущей строки
	addi t3, x0, 0			# Счетчик столбцов
cycle:
	lw t6, 0(a4)			# Загружаем элемент матрицы
	addi a4, a4, 4			# Сдвигаем указатель матрицы
	add t5, t5, t6			# Добавляем к сумме
	addi t3, t3, 1			# Увеличиваем счетчик столбцов
	blt t3, t1, cycle		# Повторяем цикл, если столбцы не кончились
	sw t5, 0(a5)			# Сохраняем сумму в result
	addi a5, a5, 4			# Сдвигаем указатель result
	# Сравнение с текущим максимумом
	ble t5, t0, skip_update	# Если текущая сумма <= максимума, пропускаем
	mv t0, t5			# Обновляем максимальную сумму
	mv s1, t4			# Сохраняем индекс строки с максимумом
skip_update:
	addi t4, t4, 1			# Увеличиваем счетчик строк
	blt t4, t2, init		# Повторяем для всех строк
	sw s1, 0(a6)			# Сохраняем индекс максимальной строки в maxrow
	ret				# Возвращаемся
